import gradio as gr
from chat import chat_with_memory
from memory import get_recent_memories
import warnings

warnings.filterwarnings("ignore", category=FutureWarning)

session_storage = {}  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è session_id


def handle_name_submit(name):
    if not name.strip():
        return [], "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è."

    session_id = f"session_{name.lower().strip()}"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    history = get_recent_memories(session_id)
    chat_history = []

    if history:
        chat_history.append(
            {
                "role": "assistant",
                "content": f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name.strip()}! –í–æ—Ç –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:",
            }
        )

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Chatbot
        temp_user_msg = None
        for item in history:
            if item["role"] == "user":
                temp_user_msg = item["message"]
            elif item["role"] == "assistant" and temp_user_msg:
                chat_history.append({"role": "user", "content": temp_user_msg})
                chat_history.append({"role": "assistant", "content": item["message"]})
                temp_user_msg = None

        notification = f"–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è '{name.strip()}' –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."

    else:
        greeting = f"üëã –ü—Ä–∏–≤–µ—Ç, {name.strip()}!"
        help_text = chat_with_memory("/help", session_id)
        chat_history = [
            {"role": "assistant", "content": greeting},
            {"role": "assistant", "content": help_text},
        ]
        notification = f"–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è '{name.strip()}' —Å–æ–∑–¥–∞–Ω–∞."

    return chat_history, notification


def handle_chat(name: str, message: str, chat_history: list):
    if not name.strip():
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.", chat_history

    session_id = f"session_{name.lower().strip()}"

    if session_id not in session_storage:
        session_storage[session_id] = []

    response = chat_with_memory(message, session_id)

    chat_history.append({"role": "user", "content": message})
    chat_history.append({"role": "assistant", "content": response})

    return "", chat_history


with gr.Blocks(title="Light Chatbot AI") as demo:
    gr.Markdown("## üß† Light Chatbot")
    gr.Markdown("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥!")

    name_input = gr.Textbox(
        label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è", value=""
    )
    status_output = gr.Markdown("")
    chatbot = gr.Chatbot(label="–î–∏–∞–ª–æ–≥", type="messages")  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    msg_input = gr.Textbox(label="–°–æ–æ–±—â–µ–Ω–∏–µ", placeholder="–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å...")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    name_input.submit(
        handle_name_submit, inputs=name_input, outputs=[chatbot, status_output]
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞
    msg_input.submit(
        handle_chat,
        inputs=[name_input, msg_input, chatbot],
        outputs=[msg_input, chatbot],
    )

if __name__ == "__main__":
    demo.launch(share=True)
