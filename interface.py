import gradio as gr
from chat import chat_with_memory
from memory import get_recent_memories

session_storage = {}  # –≥–ª–±–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ session_id


def handle_name_submit(name):
    if not name.strip():
        return gr.update(), [], "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è."

    session_id = f"session_{name.lower().strip()}"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –ª–Ω–∞ –µ—Å—Ç—å
    history = get_recent_memories(session_id)
    chat_history = []  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é #–∞–±–æ–±–∞

    if history:
        chat_history.append(
            (None, f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name.strip()}! –í–æ—Ç –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:")
        )

        # –ø–µ—Ä–µ–æ–±—Ä–∞–∑—É–µ–º [(role, message), ...] ‚Üí [ (user, assistant), ... ]
        temp_user_msg = None
        for item in history:
            if item["role"] == "user":
                temp_user_msg = item["message"]
            elif item["role"] == "assistant" and temp_user_msg:
                chat_history.append((temp_user_msg, item["message"]))
                temp_user_msg = None

        notification = f"–°—É—â–µ–≤—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è '{name.strip()}' –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."

    else:
        greeting = f"üëã –ü—Ä–∏–≤–µ—Ç, {name.strip()}!"
        help_text = chat_with_memory("/help", session_id)
        chat_history = [(None, greeting), (None, help_text)]
        notification = f" –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è '{name.strip()}' —Å–æ–∑–¥–∞–Ω–∞."

    # –ê–ü–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ—Ä–µ –ø—Ä–∏–≤–µ—Ç—Å–≤—Ç–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞–¥
    return gr.update(visible=True), chat_history, notification


def handle_chat(name: str, message: str, chat_history: list):
    if not name.strip():
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.", chat_history

    session_id = f"session_{name.lower().strip()}"

    if session_id not in session_storage:
        session_storage[session_id] = []

    response = chat_with_memory(message, session_id)

    chat_history.append((message, response))

    return "", chat_history


with gr.Blocks(title="Light Chatbot AI") as demo:
    gr.Markdown("## üß† Light Chatbot")
    gr.Markdown("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥!")

    name_input = gr.Textbox(
        label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è", value=""
    )
    status_output = gr.Markdown("")  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    chatbot = gr.Chatbot(label="–î–∏–∞–ª–æ–≥")
    msg_input = gr.Textbox(label="–°–æ–æ–±—â–µ–Ω–∏–µ", placeholder="–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å...")

    # –î–æ–±–∞–≤–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ (Enter –ø–æ –∏–º–µ–Ω–∏)
    name_input.submit(
        handle_name_submit, inputs=name_input, outputs=[chatbot, chatbot, status_output]
    )

    msg_input.submit(
        handle_chat,
        inputs=[name_input, msg_input, chatbot],
        outputs=[msg_input, chatbot],
    )

if __name__ == "__main__":
    demo.launch(share=True)


# –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –∑–∞—è—Ü, —Å—Ä–∞–∑—É –∑–∞—Ö–æ–¥–∏ –≤ —á–∞—Ç –∏ –Ω–∞—á–∏–Ω–∞–π —Å —Å–æ–∑–¥–∞–Ω–∏—è README —Ñ–∞–π–ª–∞

# –°–º–æ—Ç—Ä–∏–º –≤ —é—Ç—É–±–µ –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤ –≥–∏—Ç—Ö–∞–±–µ,
# –∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å c README –∫–æ—à–∫–∞.
# (–°–ø—Ä–∞—à–∏–≤–∞–π —É —á–∞—Ç–∞ –∫–∞–∫ –∫—Ä–µ–ø–∏—Ç—å —Ä–µ–∞–¥–º–∏ –≤ –≥–∏—Ç—Ö–∞–±–µ)


# —á–µ–∫–Ω–∏ –ø–∞–ø–∫—É lightchatbotAi —Å–ª–µ–≤–∞, –∏ —Å–ø—Ä–æ—Å–∏ —á–∞—Ç,
# –Ω–æ—Ä–º –ª–∏ —ç—Ç–æ —Ç–æ —á—Ç–æ –≤ –ø–∞–ø–∫–µ –ø–∞–ø–∫–∞.
# –ó–∞—Ç–µ–º, –¥–≤–∏–≥–∞–π—Å—è –¥–∞–ª—å—à–µ, –∫ –≤–∏–¥–µ–æ

# –°—Ä–∞–∑—É –∑–æ—Ö–∞–¥–∏–º –≤ —á–∞—Ç, –∏ –Ω–∞ –∫—Ä–∞–π–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
